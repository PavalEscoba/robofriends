{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","robotsArray","robots","map","robot","i","key","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","autoHeight","autoHeightMin","autoHeightMax","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+QAUeA,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKC,UAAU,OACb,2BAAOA,UAAU,mCAAmCC,KAAK,SAASC,YAAY,SAASC,SAAUJ,MCaxFK,EAhBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,yBAAKF,GAAIA,EAAIL,UAAU,uDACrB,yBAAKQ,IAAG,+BAA0BH,GAAMI,IAAI,UAC5C,6BACE,4BACGH,GAEH,2BACGC,MCGIG,EAXE,SAAC,GAAc,IACxBC,EADuB,EAAZC,OACUC,KAAI,SAACC,EAAOC,GACrC,OAAO,kBAAC,EAAD,CAAMC,IAAKF,EAAMT,GAAIA,GAAIS,EAAMT,GAAIC,KAAMQ,EAAMR,KAAMC,MAAOO,EAAMP,WAE3E,OACE,oCACGI,I,OCPcM,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SAEX,6BACE,8DAGCG,KAAKL,MAAMO,a,GAnBqBC,aCmD5BC,G,kBA1Cb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAAAC,GACf,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAb1C,EAAKb,MAAQ,CACXP,OAAQ,GACRkB,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEZ,OAAQyB,S,+BAOjC,IAAD,EACyBd,KAAKJ,MAA7BP,EADD,EACCA,OAAQkB,EADT,EACSA,YACVQ,EAAiB1B,EAAO2B,QAAO,SAAAzB,GACnC,OAAOA,EAAMR,KAAKkC,cAAcC,SAASX,EAAYU,kBAEvD,OAAQ5B,EAAO8B,OAGb,yBAAK1C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcwB,KAAKK,iBAE9B,kBAAC,aAAD,CAAYe,YAAU,EAACC,cAAe,IAAKC,cAAe,KAExD,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjC,OAAQ0B,OATxB,wBAAItC,UAAU,MAAd,qB,GAzBY0B,cCEEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN,IAAMC,EAASC,SAASC,eAAe,QAEvCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GD4HnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.3a27cace.chunk.js","sourcesContent":["import React from 'react'\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search' onChange={searchChange}/>\n    </div>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n  return (\n    <div id={id} className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n      <img src={`https://robohash.org/${id}`} alt='robot'/>\n      <div>\n        <h2>\n          {name}\n        </h2>\n        <p>\n          {email}\n        </p>\n      </div>\n    </div>\n  )\n};\n\nexport default Card; ","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n  const robotsArray = robots.map((robot, i) => {\n    return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n  })\n  return (\n    <>\n      {robotsArray}\n    </>\n  );\n};\n\nexport default CardList","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError)\n      return (\n        <div>\n          <h1> oooops, something went wrong</h1>\n        </div>\n      );\n    return this.props.children;\n  }\n}\n","import React, { Component } from \"react\";\nimport SearchBox from \"../components/SearchBox\";\n// import Scroll from './Scroll';\nimport CardList from \"../components/CardList\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\n// import robots from \"./robots\";\nimport \"./app.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1 className=\"f1\"> LOADING ... </h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        {/* <Scroll> */}\n        <Scrollbars autoHeight autoHeightMin={100} autoHeightMax={500}>\n          \n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scrollbars>\n        {/* </Scroll> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nconst rootEl = document.getElementById('root');\n\nReactDOM.render(<App />, rootEl);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}